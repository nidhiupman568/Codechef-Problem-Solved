#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
using namespace std;

// MODULAR EXPONENTIATION

  ll power(ll a,ll b){
  ll result = 1;
    a %= MOD;
    if(a == 0){
      return 0;
    }

    while(b > 0){
      if(b%2){
        result = (result*a)%MOD;
        b--;
      } 
      else{
        b >>= 1;
        a = (a*a) % MOD;
      }
    }
    return result;
  }
  
int main(){
	
	int t;
	cin >> t;
	
	while(t--){
	   ll n,k;
	   cin >> n >> k;
	   
	   vector<ll>a(n);
	   ll count0 = 0;
	   
	  for(int i = 0; i < n; i++){
	      cin >> a[i];
	      if(a[i] == 0)count0++ ;
	  }
	  // cout << count0 << endl;
	  ll total = power(k,count0);

	  count0 = 0;
	  bool bl = false;
	  
	  for(int i = 0; i < n; i++){
	      if(a[i] == 0 && a[n-i-1] != 0){
	          a[i] = a[n-1-i];
	      }
	      else if(a[i] != 0 && a[n-i-1] == 0){
	          a[n-i-1] = a[i];
	      }
	      else if(a[i]!=0 && a[n-1-i]!=0 && a[i]!=a[n-i-1]){
        cout<< total << endl;
            bl = true;
             break;
        }
	  }
	  if(bl){
	      continue;
	  }
	  
	  for(int i = 0; i < n; i++){
	    if(a[i] == 0) count0++;
	  }
	   // cout << count0 << endl;
	  
	  ll total2 = power(k,count0);
	 
	  ll palondromic = power(k,(count0+1)/2);
	  ll nonpalo = (total2-palondromic+MOD)%MOD;
	    ll mod_inverse = power(2,MOD-2); //Fermat's 
	    // Works in INT as well as Rational
	    //Without this rational values give wrong answers
	  
	  nonpalo *= mod_inverse; 
	  nonpalo %= MOD;
	  
	    ll ans = (total-nonpalo+MOD)%MOD;
	      cout << ans << endl; 
	}
 return 0;
}
