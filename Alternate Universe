#include<bits/stdc++.h>
using namespace std;
#define ll long long

void solve(){
    ll n;
    cin>>n;

    vector<ll> a(n), b(n);
    for (ll i=0; i<n; i++){
        cin>>a[i];
    }

    for (ll i=0; i<n; i++){
        cin>>b[i];
    }

    // put value of r=1e6 since ans cannot be bigger than 1e6 (N=1e6)
    ll l=0, r=1e6, ans=r;
    while (l<=r){
        ll mid=(l+r)/2;

        ll tempMid=mid, flag=0;
        for (ll i=0; i<n; i++){
            if (tempMid<0){
                l=mid+1;
                flag=1;
                break;
            }

            else{
                if (tempMid<=a[i]){
                    tempMid+=b[i]-1;
                }
                else{
                    // if tempMid>a[i] there might be a possibility where we've added the max element
                    // from 0 to b[i-1] range i.e b[i-1]
                    // and the issue this raised could be that now tempMid is greater than a[i]
                    // and we cannot add b[i] due to which our tempMid might become -ve in future

                    // so we need to check if we wouldn't have added the max b[i-1] and tempMid<=a[i]
                    // our tempMid might've become soo big due to b[i] that it never became negative

                    tempMid=max(tempMid, a[i]+b[i]); // this line takes care of that
                    // above line compares the tempMid if we take max b[i-1] and if we don't take max 
                    // of that range. a[i]+b[i] we are comparing tempMid with this because this 
                    // might be larger than tempMid we are calculating by taking max element from the range
                    tempMid--;
                }
            }
        }

        // to check if Ro becomes 0 after all the contests
        if (tempMid<0){
            l=mid+1;
            continue;
        }

        if (!flag){
            ans=min(ans, mid);
            r=mid-1;
        }
    }

    cout<<ans<<endl;
    return;
}

int main(){
    ll t;
    cin>>t;

    while (t--){
        solve();
    }
}
