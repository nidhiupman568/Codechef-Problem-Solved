#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int N = 1e5;
vector<int> g[N + 1];
int dist[N + 1], a[N + 1], n, q, par[N + 1];
int up[N + 1][20];
int depth[N + 1];

void dfs1(int v) {
    for (int i = 1; i < 20; ++i) {
        up[v][i] = up[up[v][i - 1]][i - 1];
    }
    for (int x : g[v]) {
        if (x != up[v][0]) {
            depth[x] = depth[up[x][0] = v] + 1;
            dfs1(x);
        }
    }
}

int jump(int x, int d) {
    for (int i = 0; i < 20; ++i) {
        if ((d >> i) & 1) {
            x = up[x][i];
        }
    }
    return x;
}

int LCA(int a, int b) {
    if (depth[a] < depth[b]) swap(a, b);
    a = jump(a, depth[a] - depth[b]);
    if (a == b) return a;

    for (int i = 19; i >= 0; --i) {
        if (up[a][i] != up[b][i]) {
            a = up[a][i];
            b = up[b][i];
        }
    }
    return up[a][0];
}

void dfs(int x, int p) {
    for (int u : g[x]) {
        if (u == p) continue;
        dist[u] = dist[x] + 1;
        par[u] = x;
        dfs(u, x);
    }
}

void reset() {
    for (int i = 0; i < n; ++i) {
        g[i].clear();
        a[i] = dist[i] = depth[i] = 0;
        par[i] = -1;
    }
}

void solve() {
    cin >> n >> q;
    reset();
    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        --u; --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    dist[0] = 0;
    par[0] = 0;
    dfs(0, -1);
    dfs1(0);

    while (q--) {
        int t;
        cin >> t;
        if (t == 1) {
            int u, x;
            cin >> u >> x;
            --u;
            a[u] = x;
        } else {
            int u, v;
            cin >> u >> v;
            --u; --v;
            int p = LCA(u, v);
            int len = dist[u] + dist[v] - 2 * dist[p];
            if (len > 2000) {
                cout << 0 << '\n';
                continue;
            }

            vector<int> path;
            int cur = u;
            while (cur != p) {
                path.push_back(a[cur]);
                cur = par[cur];
            }
            path.push_back(a[p]);
            cur = v;
            while (cur != p) {
                path.push_back(a[cur]);
                cur = par[cur];
            }

            sort(path.begin(), path.end());
            int ans = INT_MAX;
            for (int i = 1; i < path.size(); ++i) {
                ans = min(ans, path[i] ^ path[i - 1]);
            }
            ans /= 2;
            cout << ans << '\n';
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int T;
    cin >> T;
    while (T--) {
        solve();
    }

    return 0;
}
