#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>     // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

#define int long long
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
// order_of_key (val): returns the no. of values less than val
// find_by_order (k): returns the kth largest element.(0-based)
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pi;
typedef pair<double, double> pd;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
#define dbg(x) cout << #x << " = " << x << ln
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define godspeed                      \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define NO cout << "NO" \
                << "\n"
#define YES cout << "YES" \
                 << "\n"
#define clr(x, y) memset(x, y, sizeof(x))
#define endl "\n"
#define mod 1000000007

template <class T>
bool ckmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }
mt19937 rng(chrono::high_resolution_clock::now().time_since_epoch().count());

const ll inf = 1e9;
const ll llinf = 2e18;
ll MULL(ll a, ll b, int m)
{
    a = a % m;
    b = b % m;
    return (((a * b) % m) + m) % m;
}
ll POWER(ll a, ll b, ll m)
{
    a %= m;
    ll res = 1;
    while (b > 0)
    {
        if (b & 1)
            res = MULL(res, a, m);
        a = MULL(a, a, m);
        b >>= 1;
    }
    return res;
}

struct SparseTable
{
    vector<vector<pi>> spt;
    int n, m;
    void init(int _n, int _m)
    {
        n = _n, m = _m;
        spt.resize(m);
        for (int i = 0; i < m; i++)
            spt[i].resize(n);
    }
    void build(vector<pi> &a)
    {
        for (int i = 0; i < n; i++)
            spt[0][i] = a[i];
        for (int i = 1; i < m; i++)
            for (int j = 0; j + (1 << (i - 1)) < n; j++)
                spt[i][j] = max(spt[i - 1][j], spt[i - 1][j + (1 << (i - 1))]);
    }
    pi query(int l, int r)
    {
        int i = (__bit_width(r - l + 1)) - 1;
        return max(spt[i][l], spt[i][r - (1 << i) + 1]);
    }
};

void solve(int test)
{
    int n;
    cin >> n;
    vi arr(n);
    for (int i = 0; i < n; i++)
        cin >> arr[i];
    vector<pi> brr(n - 1);
    for (int i = 0; i < n - 1; i++)
        brr[i] = {max(abs(arr[i] - arr[i + 1])-1, 1ll), i};
    SparseTable st;
    st.init(n-1, 23);
    st.build(brr);
    function<int(int, int, int)> getCnt = [&](int l, int r, int mx) -> int
    {
        // All arrays of length>=x between 1....(r-l+1)
        int A = r - l + 1;
        int B = mx - 1;
        // A 1-length arrays, A-1 2-length arrays, .... 1 A-length arrays
        // A 1-length arrays, A-1 2-length arrays, .... A-(B-1) B-length arrays
        if (A<B-1) return 0;
        return (A * (A + 1)) / 2 - (A * B - ((B - 1) * B) / 2);
    };
    function<int(int, int)> solver = [&](int l, int r) -> int
    {
        if (l > r)
            return 0;
        int mx = st.query(l, r).first;
        int i = st.query(l, r).second;
        // return mx;
        int lsum = solver(l, i - 1);
        int rsum = solver(i + 1, r);
        int currsum = getCnt(l, r, mx) - getCnt(l, i - 1, mx) - getCnt(i + 1, r, mx);
        return lsum + rsum + currsum;
    };
    // cout << st.query(0, 1).first << " " << st.query(0, 1).second << endl;
    // cout << st.query(0, 0).first << " " << st.query(0, 0).second << endl;
    // cout << st.query(1, 1).first << " " << st.query(1, 1).second << endl;
    cout << n + solver(0, n - 2) << endl;
    return;
}

signed main()
{
    godspeed;
    //    #ifndef ONLINE_JUDGE
    //       freopen("input.txt", "r", stdin);
    //       freopen("output.txt", "w", stdout);
    //    #endif
    // clock_t z = clock();
    int tests = 1;
    cin >> tests;
    for (int i = 1; i <= tests; i++)
    {
        solve(i);
    }
    // cerr << "Run Time: " << ((double)(clock() - z) / CLOCKS_PER_SEC);
    return 0;
}
