

#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp> // Include PBDS
#include <ext/pb_ds/tree_policy.hpp>
#define int long long
#define ll long long
#define vint(v,n)  int n;cin>>n;vi v(n);lp(i,n) cin>>v[i];
#define vintt(v,n)  vi v(n);lp(i,n) cin>>v[i];
#define f(i,a,b)  for(int i=a;i<=b;i++)
#define fr(i,a,b)  for(int i=a;i>=b;i--)
#define lp(i,n)  for(int i=0;i<(n);i++)
#define lpp(i,n)  for(int i=1;i<=(n);i++)
#define pb push_back
#define vi vector<int>
#define srt(v)  sort(v.begin(),v.end())
#define rev(v)  reverse(v.begin(),v.end())
#define endl "\n"
#define yep cout<<"YES"<<endl;return
#define nope cout<<"NO"<<endl;return

const int IMAX = INT32_MAX;
const int IMIN = INT32_MIN;

using namespace std;
using namespace __gnu_pbds; // Namespace for PBDS
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> oms;

const int M = 1e9+7;

ll binExp(int a, int b){
    ll ans = 1;
    ll mul = a;
    while(b>0){
        if(b&1){
            ans = (ans*mul)%M;
        }
        mul = (mul*mul)%M;
        b>>=1;
    }
    return ans;
}

int modinv(int a){
  return binExp(a, M-2);
}


// Sieve of Eratosthenes
const int N = 2e4+5;
vector<bool> isPrime(N+1,1);
vector<int> lpf(N+1,0);

void initializeSieve(){
    isPrime[0] = isPrime[1] = 0;
    for(int i = 4;i <= N; i+=2){
        isPrime[i] = 0;
    }
    for(int i=3;i<=N;i+=2){
        if(isPrime[i]){
            for(int j=i*i;j<=N;j+=2*i){
                isPrime[j] = 0;
            }
        }
    }
    for(int i=2;i<=N;i++){
        if(isPrime[i]){
            for(int j = i; j<=N;j+=i){
                if(lpf[j] == 0) lpf[j] = i;
            }
        }
    }
}


int coprimeFunction(int MAXN, int n){
    vector<int> primeFactors;
    while(n!=1){
        int div = lpf[n];
        primeFactors.pb(lpf[n]);
        while(n%div == 0) n /= div;
    }
    int sz = primeFactors.size();
    int coprimecnt = 0;
    lp(i, (1<<sz)){
        int sbcnt = 0;
        int div = 1;
        lp(j, sz){
            if(i&(1<<j)){
                div *= primeFactors[j];
                sbcnt++;
            }
        }
        if(sbcnt&1) coprimecnt -= MAXN/div;
        else coprimecnt += MAXN/div;
    }
    return coprimecnt;
}

void solve(){
    int n,k; cin>>n>>k;
    vector< vector<pair<int,int>> > gcdCnt(k+1);
    lpp(i, k){
        gcdCnt[1].pb({i, 1});
    }
    f(i, 1, k){
        for(int j=i;j<=k;j+=i){
            if(i==1 && j==1) continue;
            gcdCnt[j].pb({i, coprimeFunction(k/i, j/i)});
        }
    }
    vector<vector<int>> dp(n,vector<int>(k+1, 0));
    lpp(i, k) dp[0][i] = 1;
    lpp(i, n-1){
        lpp(j, k){
            for(auto g: gcdCnt[j]){
                dp[i][g.first] += ( dp[i-1][j] * g.second )%M;
                dp[i][g.first] %= M;
            }
        }
    }
    int ans = 0LL;
    lp(i, n){
        ans += (binExp(k, n-1-i) * dp[i][1])%M;
        ans %= M;
    }
    cout<<ans<<endl;
}


signed main() {   
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t=1;
    cin>>t;
    initializeSieve();
    while(t--){
      solve();
    }
}
