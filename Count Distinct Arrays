        // ?
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; 

//member functions :
//1. order_of_key(k) : number of elements strictly lesser than k
//2. find_by_order(k) : k-th element in the set

//=======================================================================
#define ll long long
#define int long long
#define vi vector<int>
#define vvi vector<vector<int>>
#define pii pair<int,int> 
#define vpi vector<pair<int,int>> 
#define all(x) (x).begin(),(x).end()
#define countbits(x) __builtin_popcount(x)
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define pb push_back
#define ff first
#define ss second
#define endl '\n'

// int mod = 1e9+7;
int mod = 998244353;

int max(int a,int b){return a>b ? a : b ;}

int min(int a,int b){return a<b ? a : b ;}

int hcf(int a,int b){
    return (b==0 ? a : hcf(b,a%b));
}

int lcm(int x,int y){
    return (x*y)/hcf(x,y);
}

int binpow(int x, int y, int p)
{
  int res = 1;

  while (y > 0)
  {
    if (y % 2 == 1)
    {
      res = (res * x)%p;
    }
    y = y >> 1;
    x = (x * x)%p;
  }
  return res % p;
}

int sqrt(int a)
{
  int l = 0;
  int r = 1e9;
  int ans = 0;
  while (l <= r)
  {
    int mid = l + ((r - l) / 2);
    if (mid * mid <= a)
    {
      ans = mid;
      l = mid + 1;
    }
    else
    {
      r = mid - 1;
    }
  }
  return ans;
}


void printarray(vector<int> &a){
    for(int i=0 ; i<(int)a.size() ; i++){
        cout<<a[i]<<" ";
    }
    cout<<endl;
}

int acc(vi &a){
    int sum=0;for(auto e : a){sum+=e;}
    return sum;
}


//Previous greater Element

vector<int> prevGreater(vector<int> &arr)
{
    stack<int> s;
    s.push(0);
    vector<int> prevg(arr.size(),-1);
 
    for (int i = 1; i < arr.size(); i++) {
        while (s.empty() == false && arr[s.top()] < arr[i]){
            s.pop();
        }

        if(!s.empty()){
          prevg[i]=s.top();
        }

        s.push(i);
    }

    return prevg;
}


//Next greater Element

vector<int> nextGreater(vector<int> &arr)
{
    stack<int> s;
    s.push(arr.size()-1);
    vector<int> nextg(arr.size(),-1);

    for (int i = arr.size()-2 ; i>=0 ; i--) {
        while (s.empty() == false && arr[s.top()] < arr[i]){
            s.pop();
        }

        if(!s.empty()){
          nextg[i]=s.top();
        }

        s.push(i);
    }

    return nextg;
}

void solve(){
    int n;
    cin>>n;
    vector<int> a(n,0);
    for(int i=0 ; i<n ; i++){
        cin>>a[i];
    }
    int cnt=0;
    vi prev=prevGreater(a);
    vi next=nextGreater(a);
    vi have(n,0);
    for(int i=0 ; i<n ; i++){
        if(prev[i]!=-1 && next[i]!=-1){
            have[next[i]]+=1;
        }
        cnt+=have[i];
        cout<<binpow(2,cnt,mod)<<" ";
    }
    cout<<endl;
    
  
}

int32_t main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    //for(int i=1 ; i<=t ; i++){
    //    cout<<"Case #"<<i<<": ";
    //    solve();
    //} 

    return 0;
}
