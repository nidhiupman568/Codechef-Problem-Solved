#include<bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
#define m1 1000000007
#define m2 998244353
#define inf LLONG_MAX/2
#define inf2 1e18
#define vi vector<int>
#define pi pair<int,int>
#define mi map<int,int>
#define mpi map<pair<int,int>,int>
#define vpi vector<pair<int,int>>
#define vvi vector<vector<int>>
#define vvc vector<vector<char>>
#define mc map<char,int>
#define st stack<int>
#define qu queue<int>
#define si set<int>
#define sc set<char>
#define stp stack<pair<int,int>>
#define qup queue<pair<int,int>>
#define spi set<pair<int,int>>
#define so(a) sort(a.begin(),a.end())
#define rso(a) sort(a.rbegin(),a.rend())
#define sumall(a) accumulate(a.begin(),a.end,0LL)
#define rev(a,n) reverse(a.begin(),a.begin()+n)
#define mx(a) *max_element(a.begin(),a.end)
#define mn(a) *min_element(a.begin(),a.end())
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define fi first
#define se second
#define pb push_back
#define fo(n) for(int i=0;i<n;i++)
#define rfo(n) for(int i=n-1;i>=0;i--)
#define fastio ios::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL);
int modexp(int x,int y,int m){
    int ans=1;
    while(y>0){
        if(y&1) ans=(ans*x)%m;
        y>>=1;
        x=(x*x)%m;
    }
    return (ans%m);
}
vector<int> calculateLPS(const string& pattern) {
    vector<int>lps(pattern.size(),0);
    int len=0,i=1;
    while(i<pattern.size()) {
        if(pattern[i]==pattern[len]) len++,lps[i]=len,i++; 
        else {
            if (len!=0) len=lps[len-1];
            else lps[i]=0,i++;
        }
    }
    return lps;
}
vector<int> kmpSearch(const string& text, const string& pattern) {
    vector<int>lps=calculateLPS(pattern);
    vector<int>res;
    int i=0,j=0;
    while (i<text.size()) {
        if(pattern[j]==text[i]) i++,j++;
        if(j==pattern.size()) res.push_back(i-j),j=lps[j-1];
        else if (i<text.size() && pattern[j]!=text[i]) {
            if (j!=0) j=lps[j-1];
            else i++;
        }
    }
    return res;
}
signed main(){
    fastio
    int t;
    cin>>t;
    while(t--){
        int n,k;
        cin>>n>>k;
        string s;
        cin>>s;
        string s2=s;
        reverse(s2.begin(),s2.end());
        string s3=s+s2+s;
        vector<int>ans=kmpSearch(s3,s);
        int non=0,ov=0;
        for(auto i:ans){
            if(i<=n) non++;
            else if(i<2*n) ov++;
        }
        int p1=non*modexp(2,k-1,m1),p2=ov*(modexp(2,k-1,m1)-1);
        cout<<(p1+p2)%m1<<endl;
    }
}
