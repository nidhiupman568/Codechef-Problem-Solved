//Radhe Radhe
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
const ll M = 998244353;
ll add(ll x, ll y)  { return (x%M + y%M)%M; }
ll sub(ll x, ll y)  { return (x%M - y%M + M)%M;}
ll mul(ll x, ll y)  { return (x%M * y%M)%M; }
void print(vector<ll>v1){
for(auto x:v1){cout<<x<<" ";}
cout<<endl;}
ll binexp(ll a,ll b){
ll res = 1;
while(b){
if(b&1)res = ((res%M)*(a%M)%M);
a = ((a%M)*(a%M)%M);
 b>>=1LL;
}
return res%M;
}
const int N = 1e7;
vector<int>spf(N,0);
void SPF()
{
    spf[1] = 1;
    for (long long i = 2; i < N; i++)
    {
        if (spf[i] == 0)
        {
            spf[i] = i;
            for (long long j = i * i; j < N; j += i)
                if (spf[j] == 0)
                    spf[j] = i;
        }
    }
}
void factor(int x,set<int>&s){
    while(x>1){
        s.insert(spf[x]);
        x/=spf[x];
    }
}
set<int> perm(int n)
{   
//     // cout<<"Jigar";
  set<int>ans;
  string s = to_string(n);
  sort(s.begin(),s.end());
  do{
      int x = stoi(s);
      factor(x,ans);
  }while(next_permutation(s.begin(),s.end()));
  return ans;
}
void Radhe(){
 ll t;
 cin>>t;
 while(t--){
     ll x,y;
     cin>>x>>y;
     set<int>f1 = perm(x);
     set<int>f2 = perm(y);
     int ans = 1;
     for(auto x:f1){
          if (f2.find(x) != f2.end())ans = max(ans, x);
     }
     
     cout<<ans<<endl;
 }
}
int main(){
SPF();
Radhe();
return 0;
}
