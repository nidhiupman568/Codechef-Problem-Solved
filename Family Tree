#include <bits/stdc++.h>
using namespace std;

#define fast_IO ios_base::sync_with_stdio(0), cin.tie(NULL);
#define endl '\n'
const int MOD = 1e9 + 7;

#define f first
#define s second
#define lower(s) for(int i = 0; i < s.size(); i++)  s[i] = tolower(s[i]);
#define upper(s) for(int i = 0; i < s.size(); i++)  s[i] = toupper(s[i]);
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()

typedef vector<int> vi;
typedef vector<string> vs;
typedef set<int> si;
typedef map<int, int> mii;
typedef pair<int, int> pii;

//time complexcity is :- O(sqrt(N))
void factors(int num)
{
    int ans = 0;
    for(int i = 1; i * i <= num; i++)
    {
        if(num % i == 0) //here i is factor og our prime number
        { 
            ans++;
            if(i != num / i)//here (num / i) is factor of num 
                ans++;
        }
    }
}

//time complexcity is :- O(sqrt(N))
bool prime(long long int num)
{
    for(long long int i = 2; i * i <= num; i++)
        if(num % i == 0)
            return false;
    
    return num > 1;
}

// time complexcity is :- O(N)
void sieveprime(int num)
{
    bool prime[num + 1];
    
    fill(prime, prime + num + 1, true);
    
    prime[0] = false;
    prime[1] = false;
    
    for(int i = 2; i <= num; i++)
    {
        if(prime[i])
        {
            cout << i << " ";
            for(int j = i * 2; j <= num; j += i)
            {
                prime[j] = false;
            }
        }
    }
}

//O(logn)
int power(int a, int b)
{
    if(a == 0)
        return 1;
    if(a == 1)
        return a;
    
    int half_power = power(a, b / 2);
    
    if(b % 2 == 0)
        return half_power * half_power;
    return half_power * half_power * a;
}

//time complexcity is O(n)
void prefix_sum(vector<int> vec)
{
    int sum = 0;
    vector<int> prefix;
    
    //prefix sum
    for(auto it : vec)
    { 
        sum += it;
        prefix.push_back(sum);
    }
    
    
    //sum of intervals given as query
    int q;
    cin >> q;
    
    while(q--)
    {
        int l, r;
        cin >> l >> r;
        
        if(l != 0)
            cout << prefix[r] - prefix[l - 1] << endl;
        else
            cout << prefix[r] << endl;
    }
}

void dfs(int node, vector<int> &visited, vector<int> adj[], long long int w[], long long int mini, long long int maxi, long long int &ansmaxi)
{
    visited[node] = 1;
        
    if(adj[node].size() == 0)
    {
        ansmaxi = max(ansmaxi, abs(mini - maxi));
    }
    
    for(auto it : adj[node])
    {
        if(!visited[it])
        {
           dfs(it, visited, adj, w, min(mini, w[it]), max(maxi, w[it]), ansmaxi);
        }
    }
}

int main() {
	// your code goes here
    int n;
    cin >> n;
    
    long long int w[n + 1];
    int p[n];
    
    for(int i = 0; i < n; i++)
        cin >> w[i + 1];
    
    vector<int> adj[n + 1];
    int node = 0;
    for(int i = 0; i < n; i++)
    {
        cin >> p[i];
        
        if(p[i] == -1)
            node = i + 1;
        else
        {
            adj[p[i]].push_back(i + 1);
        }
    }
    
    vector<int> visited(n + 1, 0);
    long long int ansmaxi = INT_MIN;
    long long int maxi = w[node];
    long long int mini = w[node];
    
    dfs(node, visited, adj, w, mini, maxi, ansmaxi);
    
    cout << ansmaxi << endl;
	return 0;
	
}
