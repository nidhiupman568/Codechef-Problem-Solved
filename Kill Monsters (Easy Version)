  
  
   
 #include <bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;

template <class T>
using Tree= tree< T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define int long long
#define vi vector<int>
#define vs vector<string>
#define mii map<int,int>
#define umii unordered_map<int,int>
#define pii pair<int,int>
#define mod1 998244353
#define mci map<char,int>
#define vpii vector<pair<int,int>>
#define vvii vector<vector<int>>
#define mod 1000000007
#define sei set<int>
#define ses set<string> 
#define ues unordered_set<string> 
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(),x.end()
#define sall(x) sort(x.begin(),x.end());
#define rall(x) sort(x.rbegin(),x.rend())
#define MAX(x) *max_element(x.begin(),x.end())
#define MIN(x) *min_element(x.begin(),x.end())
#define SUM(X) accumulate(X.begin(),X.end(),0LL)
#define FIND(x,y) binary_search(all(x),y)
#define MEM(x,y) memset(x,y,sizeof(x))
#define binone(x) __builtin_popcountll(x)
#define int long long int
#define pb push_back
#define Test int t;cin>>t;while(t--)
#define in insert
#define ff first 
#define ss second 
#define rep(i,a,b) for(int i=a;i<b;i++)
#define repeq(i,a,b) for(int i=a;i<=b;i++)
#define revf(i,a,b) for(int i=b-1;i>=a;i--)
#define mini(a,b,c) min(a,min(b,c))
#define maxi(a,b,c) max(a,max(b,c)) 
#define rev(arr) reverse(arr.begin(),arr.end());
const int N=1e5+7;
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define ret return 0
#define endl '\n' //remove for interactives

// ================================== take ip/op like vector,pairs directly!==================================
template<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }
template<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }
template<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }
template<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\n'; return cout; }
template<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }
// ===================================END Of the input module ==========================================

 
 
 
  int solve() {
    
    int n,k,x;
    cin>>n>>x>>k;
 
    vi arr(n);
    cin>>arr;

    mii mp;
    for(auto it:arr) mp[it]++;
    
    // sort the array 
    sort(arr.begin(),arr.end());

         int ans = 0;

         vi temp,temp2;

         temp2=arr;
         // for unique values of monster's health
         temp2.resize(distance(temp2.begin(),unique(temp2.begin(),temp2.end())));
         
         umii vis,vis2;
         int idx=-1;
         
         // case 1 -->Using Spell Initially     How many unique monster's health are lesser than k * x
              int ans1=0;
              auto it = lower_bound(all(temp2),k*x)-temp2.begin();  
              ans1=it;   
 
         // case 2-->Using Spell but before we are killing some monsters for maximum killing
         // observation -->   if some monster health is lesser than x  then we can select all monster's unique health till the smallest monster health
         
         // killing monsters without spell 
             for(int i=n-1;i>=0;i--) {
                if(arr[i]<x) {
                    idx=i;
                    break;
                }
             } 
    
             for(int i=idx;i>=0;i--) {
                if(mp[arr[i]] and !vis[arr[i]]) { 
                    ans++;          
                    vis[arr[i]]=1;
                    mp[arr[i]]--;
                    if(mp[arr[i]]==0) mp.erase(arr[i]); 
                }
             }                            
         
         // to use spell optimally we are creating another array 
         
         rep(i,0,n) {
            if(mp[arr[i]] and !vis2[arr[i]]) { 
                temp.push_back(arr[i]); 
                vis2[arr[i]]=1;
            }
         }
 
           int maxi = 0LL;

         if(ans) {
                for(int i=0;i<temp.size();i++) {
                    if(vis[temp[i]]) {  // can only take if we have taken it previously
                        //   killing monsters in decreasing order we can go to again lesser than k  * monster's health using spell and can again continue killing process 
                        
                           auto it = lower_bound(temp.begin(),temp.end(),k*temp[i])-temp.begin();
                            maxi = max(maxi, it-i);   // finding such maximum range 
                            
                    } 
                  }
         }
        
         cout<<max(ans1,ans+maxi)<<endl;   // maximum of (spell used intially ,  spell used but before that some monster's were killed)
    
    return 0;
  } 
 
  
  
signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
 
      long long t;
      cin>>t;
      while(t--)

       solve();  

       ret;
} 
