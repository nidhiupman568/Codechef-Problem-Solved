#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;

#define fast_io ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)

#define forn(i,e) for(ull i = 0; i < e; i++)
#define forsn(i,s,e) for(ull i = s; i < e; i++)
#define rforn(i,s) for(ull i = s; i >= 0; i--)
#define rforsn(i,s,e) for(ull i = s; i >= e; i--)

#define ln "\n"
#define dbg(x) cout<<#x<<" = "<<x<<ln

#define pb push_back
#define fi first
#define se second

#define all(vec) for(auto i : vec)cout<<i<<" ";

#define vb vector<bool>
#define vi vector<ll>

#define int ll

const int MOD = 1000000007;
const int inf = 1e17;

vi fact(250001,1);

void facto(){
    forsn(i,2,250001){
        fact[i]=fact[i-1]*i;
        fact[i]%=MOD;
    }
}
ll expo(ll a, ll b, ll m) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % m; a = (a * a) % m; b >>= 1;} return res;}

void solve() {
    
    int n;
    cin>>n;
    
    vector<vi> a(n,vi(n));
    vb is((n*n)+1,false);
    
    forn(i,n)forn(j,n)
    {cin>>a[i][j];is[a[i][j]]=true;}
    
    if(n==1){
        cout<<1<<ln;
        return;
    }
    
    int lim = ((n*n)-n)/2;
    int mn = (n*n)-lim;
    
    int ans=0,an=0;
    
    forn(i,n){
        forsn(j,i+1,n){
            if(a[i][j]>lim && a[i][j]<=mn){
                 cout<<0<<ln;return;
            }
            if(a[j][i]>lim && a[j][i]<=mn){
                 cout<<0<<ln;return;
            }
            
            if(a[i][j]>0 && a[j][i]>0){
                if(a[i][j]%mn!=a[j][i]%mn){
                    cout<<0<<ln;return;
                }
            }else{
                if(a[i][j]==0 && a[j][i]==0){
                    ans++;
                }else{
                    if(a[i][j]>0){
                        if(a[i][j]<=lim){
                            if(is[mn+a[i][j]]){
                                cout<<0<<ln;return;
                            }
                            is[mn+a[i][j]]=true;
                            an++;
                        }else if(a[i][j]>mn){
                            if(is[a[i][j]%mn]){
                                cout<<0<<ln;return;
                            }
                            is[a[i][j]%mn]=true;
                            an++;
                        }else{
                            cout<<0<<ln;return;
                        }
                    }else{
                        if(a[j][i]<=lim){
                            if(is[mn+a[j][i]]){
                                cout<<0<<ln;return;
                            }
                            is[mn+a[j][i]]=true;an++;
                        }else if(a[j][i]>mn){
                            if(is[a[j][i]%mn]){
                                cout<<0<<ln;return;
                            }
                            is[a[j][i]%mn]=true;an++;
                        }else{
                            cout<<0<<ln;return;
                        }
                    }
                }
            }
        }
    }
    
    int as = 0;
    forn(i,n){
        if(a[i][i]==0)as++;
        else if(a[i][i]<=lim || a[i][i]>mn){
            cout<<0<<ln;return;
        }
    }
    
    //dbg(lim);dbg(mn);dbg(ans);dbg(as);
    
    int one = fact[ans];
    ans=expo(2,ans,MOD)%MOD;
    one*=ans;
    one%=MOD;
    
    int fin = one*fact[as];
    fin%=MOD;
    cout<<fin<<ln;
    
}
int32_t main()
{
    fast_io;
    
    facto();
    int t=1;
    cin>>t;
    while(t--)
    solve();
    return 0;
}
