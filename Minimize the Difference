#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template<typename T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)
#define pb push_back
#define endl '\n'
#define sz(a) (int)a.size()
#define setbits(x) __builtin_popcountll(x)
#define ff first
#define ss second
#define conts continue
#define ceil2(x,y) ((x+y-1)/(y))
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define yes cout << "Yes" << endl
#define no cout << "No" << endl

#define rep(i,n) for(int i = 0; i < n; ++i)
#define rep1(i,n) for(int i = 1; i <= n; ++i)
#define rev(i,s,e) for(int i = s; i >= e; --i)
#define trav(i,a) for(auto &i : a)



const int MOD = 998244353;


void solve(int test_case)
{
    int n; cin >> n;
    vector<int> a(n+5);
    rep1(i,n) cin >> a[i];
    const int m = 5000;

    vector<bitset<2*m+5>> dp1(n+5);

    auto ok = [&](int mid){
        rep(i,n+1) dp1[i] = 0;
        rep(j,mid+1) dp1[0][j] = 1;

        rep1(i,n){
            dp1[i] = ((dp1[i-1]<<a[i])|(dp1[i-1]>>a[i]))&dp1[0];
        }

        return dp1[n].count() > 0;
    };

    int l = 0, r = 1e4;
    int ans1 = -1;

    while(l <= r){
        int mid = (l+r) >> 1;
        if(ok(mid)){
            ans1 = mid;
            r = mid-1;
        }
        else{
            l = mid+1;
        }
    }

    vector<vector<int>> dp2(n+5,vector<int>(ans1+5));
    rep(j,ans1+1) dp2[1][j] = 1;

    rep1(i,n){
        rep(j,ans1+1){
            if(j+a[i] <= ans1){
                dp2[i+1][j+a[i]] += dp2[i][j];
                if(dp2[i+1][j+a[i]] >= MOD){
                    dp2[i+1][j+a[i]] -= MOD;
                }
            }
            if(j-a[i] >= 0){
                dp2[i+1][j-a[i]] += dp2[i][j];
                if(dp2[i+1][j-a[i]] >= MOD){
                    dp2[i+1][j-a[i]] -= MOD;
                }
            }
        }
    }

    int ans2 = 0;
    rep(j,ans1+1){
        ans2 += dp2[n+1][j];
        if(ans2 >= MOD){
            ans2 -= MOD;
        }
    }

    cout << ans1 << " " << ans2 << endl;
}

int main()
{
    fastio;

    int t = 1;
    cin >> t;

    rep1(i, t) {
        solve(i);
    }

    return 0;}
