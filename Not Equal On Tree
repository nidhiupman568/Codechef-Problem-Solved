
#include<bits/stdc++.h>
#define INT long long
#define bctz __builtin_ctz
#define endl '\n'
using namespace std;
const int NN = 5010;
int A[NN],B[NN];
const int mod = 1e9 + 7;

int u[NN],v[NN];
vector<int> adj[NN];
vector<int> vec[NN];
int flag[NN];
bool check(int u,int fa = 0){
	if(flag[u]) return 1;
	for(auto v : adj[u]){
		if(v == fa) continue;
		if(check(v,u)) return 1;
	}
	return 0;
}
vector<pair<int,int> > dp[NN];
vector<pair<int,int> > merge(vector<pair<int,int> > a,vector<pair<int,int> > b){
	vector<pair<int,int> > ans(a.size() + b.size() - 1,{1e5,0});
	for(int i = 0 ; i < a.size(); i++){
		for(int j = 0; j < b.size(); j++){
			if(ans[i + j].first > a[i].first + b[j].first){
				ans[i + j].first = a[i].first + b[j].first;
				ans[i + j].second = 1ll * a[i].second * b[j].second % mod;
			}
			else if(ans[i + j].first == a[i].first + b[j].first){
				ans[i + j].second = (ans[i + j].second + 1ll * a[i].second * b[j].second % mod) % mod;
			}
		}
	}
	return ans;
}
void dfs(int u,int fa = 0){
	vector<pair<int,int> > ans(2,{0,0});
	if(flag[u]){
		ans[0] = {1e5,0};
		ans[1] = {1,1};
	}
	else {
		ans[1] = {1e5,0};
		ans[0] = {1,1};
	}
	for(auto v : adj[u]){
		if(v == fa) continue;
		dfs(v,u);
		ans = merge(ans,dp[v]);
	}
	if(ans[0].first > 0) ans[0] = {0,1};
	else ans[0].second = (ans[0].second + 1) % mod;
	dp[u] = ans;
//	cerr << u << endl;
//	for(int i = 0; i < 2; i++) cerr << ans[i].first << " " << ans[i].second << endl;
}
int main(){
#ifndef ONLINE_JUDGE
	freopen("in.in","r",stdin);
	freopen("out.out","w",stdout);
#endif
	ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
	int q;
	cin >> q;
	while(q--){
		int n;
		cin >> n;
		for(int i = 1; i <= n; i++){
			cin >> A[i];
		}
		for(int i = 1; i <= n; i++) cin >> B[i];
		for(int i = 1; i < n; i++){
			cin >> u[i] >> v[i];
			adj[u[i]].push_back(v[i]);
			adj[v[i]].push_back(u[i]);
		}
		set<int> st;
//		lca.dfs(1);
		for(int i = 1; i <= n;i++) {
			if(A[i] == B[i]) flag[i] = 1;
			else flag[i] = 0;
		}
		int val = n + 1;
		vector<int> id(n + 10,0);
		for(int i = 1; i <= n; i++){
			int cnt = 0;
			for(auto v : adj[i]){
				if(check(v,i)) cnt++;
			}
			if(cnt >= 2 || A[i] == B[i]) id[i] = val;
			else {
				id[i] = i;
			}
		}
		for(int i = 1; i <= n; i++) adj[i].clear();
		
		for(int i = 1; i < n; i++){
			if(id[u[i]] == id[v[i]]) continue;
			adj[id[u[i]]].push_back(id[v[i]]);
			adj[id[v[i]]].push_back(id[u[i]]);
		}
		
		vector<int> cnt(n + 10,0);
		int tot = 0;
		for(int i = 1; i <= n; i++){
			if(id[i] == val){
				cnt[A[i]]++;
				cnt[B[i]]++;
				tot++;
			}
		}
		int mx = 0;
		int res = 0;
		for(int i = 1; i <= n; i++){
			if(mx < cnt[i]) {
				mx = cnt[i];
				res = i;
			}
		}
		if(mx <= tot){
			cout << tot << " " << 1 << endl;
		}
		else{
			int target = mx - tot;
			for(int i = 1; i <= n; i++){
				flag[i] = 0;
				if(id[i] == val) continue;
				if(A[i] != res && B[i] != res) flag[i] = 1;
			}
			vector<pair<int,int> > ans;
			for(auto v : adj[val]) {
				dfs(v,val);
				if(ans.size() == 0) ans = dp[v];
				else {
					ans = merge(ans,dp[v]);
				}
			}
//			cerr << ans[target].first << endl;
			if(ans.size() <= target || ans[target].first >= 1e5){
				cout << -1 << " " << -1 << endl;
			}
			else cout << ans[target].first + tot << " " << ans[target].second << endl;
		}
		for(int i = 1; i <= n + 1; i++) adj[i].clear();
	}
}
