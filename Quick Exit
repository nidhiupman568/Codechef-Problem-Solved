#include <bits/stdc++.h>
using namespace std;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int tt;
    cin >> tt;
    while(tt--)
    {
        
        int n, k;
        cin >> n >> k;
        vector<vector<int> > tree(n);
        for(int i = 1; i < n; i++)
        {
            int u, v;
            cin >> u >> v;
            u--, v--;
            tree[u].push_back(v);
            tree[v].push_back(u);
        }
        
        vector<long long> subtree(n, 1), path, vec;
        
        function<void(int, int)> dfs = [&] (int u, int par) -> void
        {
            
            if(u == n - 1) path = vec;
            
            vec.push_back(u);
            for(auto v : tree[u])
            {
                if(v != par)
                {
                    dfs(v, u);
                    subtree[u] += subtree[v];
                }
            }
            vec.pop_back();
            
        }; dfs(0, -1);
        
        set<long long> st(path.begin(), path.end());
        vec.clear();
        
        function<void(int, int)> dfs1 = [&] (int u, int par) -> void
        {
        
            if(st.count(par) && !st.count(u) && u + 1 < n) vec.push_back(subtree[u]);
            
            for(auto v : tree[u])
            {
                if(v != par)
                {
                    dfs1(v, u);
                }
            }
            
        }; dfs1(0, -1);
        
        sort(vec.begin(), vec.end());
        
        long long ans = path.size() + 1;
        for(int i = 0; i < (long long)vec.size() - k + 1; i++)
        {
            ans += vec[i];
        }
        
        cout << ans << '\n';
        
    }

    return 0;
}
