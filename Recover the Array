//#pragma GCC optimize("O3")
//#pragma GCC optimize("Ofast")
//#pragma GCC optimize("unroll-loops")
//#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")


#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;


struct custom_hash {
        static uint64_t splitmix64(uint64_t x) {
                // http://xorshift.di.unimi.it/splitmix64.c
                x += 0x9e3779b97f4a7c15;
                x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
                x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
                return x ^ (x >> 31);
        }

        size_t operator()(uint64_t x) const {
                static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
                return splitmix64(x + FIXED_RANDOM);
        }
};
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template<typename T>
T rand(T a, T b){
    return uniform_int_distribution<T>(a, b)(rng);
}

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
typedef long long ll;
typedef long double ld;
typedef vector<ll> vl;
typedef vector<int> vi;


#define rep(i, a, b) for(int i = a; i < b; i++)
#define all(x) begin(x), end(x)
#define sz(x) static_cast<int>((x).size())
#define int long long

const ll mod = 998244353;
const ll INF = 1e18;

/* ----------------------------------------------------- GO DOWN ---------------------------------------------------------------------- */




signed main() {

        ios::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);

        vector<vector<int>> pos;
        int tot = 1024;
        for (int i = 1; i < tot; i++) {
                vector<int> v;
                int cur = i;
                for (int j = 0; j < 5; j++) {
                        int x = cur % 4;
                        for (int k = 0; k < x; k++) v.push_back(j);
                        cur /= 4;
                }
                vector<vector<bool>> p(4, vector<bool>(5, 0));
                p[0][0] = 1;
                for (auto u : v) {
                        for (int j = 2; j >= 0; j--) {
                                for (int k = 0; k < 5; k++) {
                                        if (p[j][k]) p[j + 1][(k + u) % 5] = 1;
                                }
                        }
                }
                if (p[3][0] == 0) {
                        vector<int> f;
                        cur = i;
                        for (int j = 0; j < 5; j++) {
                                int x = cur % 4;
                                f.push_back(x);
                                cur /= 4;
                        }
                        pos.push_back(f);
                }
        }

        int t;
        cin >> t;

        while (t--) {

                int n;
                cin >> n;
                int a[n];
                for (int i = 0; i < n; i++) cin >> a[i];

                vector<bool> ex(20 * n + 1, 0);
                bool ps = 1;
                sort(a, a + n);
                int prev = -1;
                int c[5] = {0};
                int cn = 0;
                int ext = 0;
                for (auto u : a) {
                        if (u == -1) {
                                cn++;
                                continue;
                        }
                        if (u == prev) ps = 0;
                        if (u <= 20 * n) ex[u] = 1;
                        prev = u;
                        c[u % 5]++;
                        ext += u;
                }

                if (!ps) {
                        cout << -1 << "\n";
                        continue;
                }

                int ans = INF;

                for (auto v : pos) {

                        ps = 1;
                        vector<int> f;
                        for (int i = 0; i < 5; i++) {
                                if (v[i] == 3) {
                                        if (i) f.push_back(i);
                                        continue;
                                }
                                if (c[i] > v[i]) ps = 0;
                        }
                        if (v[0] == 3) f.push_back(5); 

                        if (!ps) continue;

                        int don = 0;
                        int an = 0;
                        int c2[5];
                        for (int i = 0; i < 5; i++) c2[i] = c[i];
                        for (int i = 1; i <= 10; i++) {
                                if (don == cn) break;
                                if (ex[i]) continue;
                                if (v[i % 5] == 3 || v[i % 5] > c2[i % 5]) {
                                        c2[i % 5]++;
                                        an += i;
                                        don++;
                                }
                        }
                        int cur = 10;

                        while (don < cn) {
                                if (sz(f) == 0) break;
                                for (auto u : f) {
                                        if (don == cn) break;
                                        if (ex[u + cur]) continue;
                                        don++;
                                        an += u + cur;
                                }
                                cur += 5;
                        }

                        if (don == cn) {
                                ans = min(ans, ext + an);
                        }

                }

                if (ans == INF) cout << -1 << "\n";
                else cout << ans << "\n";

        }
        
       
}
