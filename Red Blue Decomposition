#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'

const int MAXN = 2e5 + 5;
const int RED = 0, BLUE = 1;
int N;
vector<vector<int>> adj;
vector<int> color, flip;

int dfs1(int u, int p) {
    int sz = 1;
    int act = 0;
    for (int v : adj[u]) {
        if (v == p) continue;
        int csz = dfs1(v, u);
        if (csz & 1) {
            if (act) flip[v] ^= 1;
            act ^= 1;
        }
        sz += csz;
    }
    if (sz % 2 == 0) color[u] = BLUE;
    return sz;
}

void dfs2(int u, int p, int f) {
    for (int v : adj[u]) {
        if (v == p) continue;
        dfs2(v, u, flip[v] ^ f);
    }
    if (flip[u]) color[u] ^= 1;
}

void solve() {
    cin >> N;
    adj.assign(N, {});
    for (int i = 0; i < N - 1; i++) {
        int u, v;
        cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // memset(color, 0, sizeof(color));
    // memset(flip, 0, sizeof(flip));
    color.assign(N, 0);
    flip.assign(N, 0);
    dfs1(0, -1);
    dfs2(0, -1, 0);
    string ans;
    ans.reserve(N);
    for (int i = 0; i < N; i++) {
        ans += (color[i] == RED ? 'R' : 'B');
    }
    cout << ans << endl;
}

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int aman;
    cin >> aman;
    while (aman--) {
        solve();
    }
    return 0;
}
