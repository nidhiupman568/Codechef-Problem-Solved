#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi vector<int>
#define vll vector<ll>
#define all(v) v.begin(), v.end()
#define sl set<long long>
#define msl multiset<long long>
#define sc set<char>
#define f(i, s, e) for (long long i = s; i < e; i++)
#define cf(i, s, e) for (long long i = s; i <= e; i++)
#define rf(i, e, s) for (long long i = e - 1; i >= s; i--)
#define pb push_back
#define eb emplace_back
#define mod 1000000007
#define read(arr, n) for (int i = 0; i < n; i++) cin >> arr[i];
const int dx[4] = {-1, 0, 0, 1};
const int dy[4] = {0, -1, 1, 0};
#define PI 3.1415926535897932384626433832795
#define mii map<int, int>
#define mli map<long long, int>
#define ss second
#define ff first

/* stuff you should look for
* int overflow array bounds
* special cases (n=1?)
* do smth instead of nothing and stay organized
* WRITE STUFF DOWN
* DON'T GET STUCK ON ONE APPROACH
*/

const ll maxi = 500001;
ll n, q, dist[maxi], table[21][maxi];
pair<ll, ll> seg[maxi * 4 + 2];

void build(ll ind, ll l, ll r) { 
    // Building the segment tree based on distance array 'dist'
    if (l == r) { // Single element
        seg[ind] = {dist[l] + l, l};
        return;
    }
    ll mid = (l + r) / 2;
    build(ind * 2, l, mid);
    build(ind * 2 + 1, mid + 1, r);
    seg[ind] = max(seg[ind * 2], seg[ind * 2 + 1]);
}


pll query(ll ind, ll l, ll r, ll s, ll e) {
    if (l > e || r < s) {
        return {-1, -1}; // No overlap
    }
    if (l >= s && r <= e) {
        return seg[ind]; // Complete overlap
    }
    ll mid = (l + r) / 2;
    return max(query(ind * 2, l, mid, s, e), query(ind * 2 + 1, mid + 1, r, s, e)); // Partial overlap
}

void solve() {
    // Idea 1: From any index j, jump to the index i such that (i + dist[i]) is maximum
    // Since edges can form i to i + j, where j >= 0 - j <= dist[i]
    // We could maintain a segment tree for range queries
    // Since the queries are offline, we don't need to update anything
    // Just have a build function as well as the query

    cin >> n >> q;
    read(dist, n);
    for (int i = 0; i <= 4 * n; i++) {
        seg[i] = {0, -1};
    }
    build(1, 0, n - 1);

    // Using binary lifting to quickly reach the node
    for (int i = 0 ;  i < n; i++) { 
        table [0][i] = query ( 1 , 0 , n - 1, i , i + dist [i]).ss ;
    }

    for (int power = 1; power < 21; power++) {
        for (int node = 0; node < n; node++) {
            table[power][node] = table[power - 1][table[power - 1][node]];
        }
    }

    while (q--) {
        ll x, y;
        cin >> x >> y;
        x-- ; y -- ;
        if (x == y) { // Direct check for invalid input
            cout << 0 << endl;
            continue;
        }
        if (x > y) { // Direct check for invalid input
            cout << -1 << endl;
            continue;
        }
        if (x + dist[x]>= y) { // Direct check for invalid input
            cout << 1 << endl;
            continue;
        }
        ll cnt = 0, flag = 0;
        for (int i = 20; i >= 0; i--) {
            if ( table[0][table[i][x]] < y){
                x = table[i][x] ;
                cnt += ( 1 << i ) ;
            }
        }

        if ( x + dist [x ] >= y) {
            cout << cnt + 1 << endl ; 
        } else if ( table[0][x] + dist[table[0][x]] >= y ) {
            cout << cnt + 2 << endl ; 
        } else {
            cout << -1 << endl ; 
        }
    }
}

int main() {
    ll t;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
