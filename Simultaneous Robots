#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <vector>
#include <stack>
#include <numeric>
#include <queue>
#include <fstream>
using namespace std;
#define int long long
const long long MOD = 998244353;
const int N = 1e5 + 10 ;
// mod = 43234324323 ;
#define MIN_IN(A) *(std::min_element(A.begin(), A.end()))
#define MAX_IN(A) *(std::max_element(A.begin(), A.end()))
#define MAX_AT(A) (std::max_element(A.begin(), A.end()) - A.begin())
#define MIN_AT(A) (std::min_element(A.begin(), A.end()) - A.begin())
#define pb push_back
#define SORT(A) std::sort(A.begin(), A.end())
#define RSORT(A) std::sort(A.rbegin(), A.rend())
#define REVERSE(A) std::reverse(A.begin(), A.end())
#define VECIN(n,A) for(int i = 0; i < n; i++) { cin >> A[i]; }
#define VECOUT(A) for(int i = 0; i < A.size(); i++) { cout << A[i] << " "; } cout << endl;
#define COUT(A) cout<<A<<endl;
#define VVECOUT(dp) for(int i=0;i<dp.size();i++){for(int j=0;j<dp[0].size();j++){cout<<dp[i][j]<<" ";}cout<<"\n";}
#define ull unsigned long long
#define D double
#define UI unsigned int
//  Hello World !
int power(int x, int y) {
    int res = 1;
    x = x % MOD; 
    while (y > 0) {  
        if (y & 1) 
            res = (res * x) % MOD;  
        y = y >> 1;
        x = (x * x) % MOD;   
    } 
    return res; 
}
 
int phi(int n) {
	int ans = n;
	for (int p = 2; p * p <= n; p++) {
		if (n % p == 0) {
			while (n % p == 0) { n /= p; }
			ans -= ans / p;
		}
	}
	if (n > 1) { ans -= ans / n; }
	return ans;
}

//  int tsum  = accumulate(v.begin() , v.end() , 0LL);
//  for a prime p , if raised to power q , # of no.s divisible by p if p^(q-1) that are >=1 && <= p^q;
// N = 1e5+10;
// 2 power i is 1<<i = power(2,i)
// while creating numbers in certain limit try to add factors to the sorted ans in dec. not inc.
// int cnt=__builtin_popcount(i);
// vector <int> primes;
bool is_valid(int i,int j,int n,int m,vector<string> &v){
    return i>=0 && j>=0 && i<n && j<m && (v[i][j]=='.') ;
}
void solve() {
    int n,m;
    cin>>n>>m;
    vector < string > v(n);
    VECIN(n,v);

    if(!(v[1][0]=='.' && v[0][1]=='.' && v[n-1][m-2]=='.' && v[n-2][m-1]=='.')){
        cout<<-1<<"\n";
        return;
    }
    vector < vector < int > > dist(n,vector<int>(m,1e8));

    //  array for movement
    int arr1[] = {1,0,0,-1};
    int arr2[] = {0,1,-1,0};

    //  BFS for first robot ;
    queue < pair < int ,int > > q;
    q.push({0,0});
    dist[0][0]=0;
    while(!q.empty()){
        pair < int,int>  fro = q.front();
        q.pop();
        int x = fro.first ; int y = fro.second;
        if (x==n-1 && y==m-1) break;
        for(int i=0;i<4;i++){
            int nx = x+arr1[i]; int ny = y+arr2[i];
            if(is_valid(nx,ny,n,m,v) && dist[nx][ny]==1e8){
                dist[nx][ny] = dist[x][y]+1;
                q.push({nx,ny});
            }
        }
    }
    // If no path exists
    if(dist[n-1][m-1]==1e8){
        cout<<-1<<"\n";
        return;
    }
    //  Backtracking the first path
    vector < pair <int, int > > path;
    int x = n-1 ; int y = m-1; int dis = dist[n-1][m-1];
    while((x>0||y>0)){
        for(int i=0;i<4;i++){
            int nx = x-arr1[i];int ny = y-arr2[i];
            if(is_valid(nx,ny,n,m,v) && dist[nx][ny]==dis-1){
                path.pb({nx,ny});
                x = nx ; y = ny ; dis--;
                break;
            }
        }
    }
    for(int i=0;i<path.size();i++){
        // cout<<path[i].first << " "<<path[i].second<<"\n";
        int x = path[i].first ; int y = path[i].second ;
        v[x][y]='#';
    }
    v[0][0]='.' ; v[n-1][m-1]='.';

    // check if path exist for second robot
    vector < vector < int > > dist1(n,vector<int>(m,1e8));
    queue < pair < int ,int > > q1;
    q1.push({0,0});
    dist1[0][0]=0;
    while(!q1.empty()){
        pair < int,int>  fro = q1.front();
        q1.pop();
        int x = fro.first ; int y = fro.second;
        if (x==n-1 && y==m-1) break;
        for(int i=0;i<4;i++){
            int nx = x+arr1[i]; int ny = y+arr2[i];
            if(is_valid(nx,ny,n,m,v) && dist1[nx][ny]==1e8){
                dist1[nx][ny] = dist1[x][y]+1;
                q1.push({nx,ny});
            }
        }
    }
    if(dist1[n-1][m-1]==dist[n-1][m-1]){
        cout<<dist[n-1][m-1]<<"\n";
        return ;
    }
    cout<<dist[n-1][m-1]+2<<"\n";
    return;
}


signed main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr); std::cout.tie(nullptr);
    
    int tt;
    // tt =1;
    cin >> tt;
    while(tt--){
        solve();
    }
}
