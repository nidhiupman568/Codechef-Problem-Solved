#include <bits/stdc++.h>

using namespace std;

const int N = 100005;

int n, x;
int a[N];
vector<int> g[N];
int ord[N], tout[N];
long long f[N], p[N];
int dfs_t = 0;

void dfs(int u, int p) {
  ord[++dfs_t] = u;
  for (auto &v : g[u]) {
    if (v != p) {
      dfs(v, u);
    }
  }
  tout[u] = dfs_t;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int tt;
  cin >> tt;
  while (tt--) {
    cin >> n >> x;
    for (int i = 1; i <= n; i++) {
      g[i].clear();
    }
    for (int i = 1; i <= n; i++) {
      cin >> a[i];
    }
    for (int i = 1; i <= n - 1; i++) {
      int u, v;
      cin >> u >> v;
      g[u].emplace_back(v);
      g[v].emplace_back(u);
    }
    dfs_t = 0;
    dfs(1, 1);
    for (int i = 1; i <= n; i++) {
      p[i] = a[ord[i]] + p[i - 1];
    }
    memset(f, -0x3f, sizeof(f));
    f[0] = 0;
    for (int i = 1; i <= n; i++) {
      f[i] = max(f[i], f[i - 1] + a[ord[i]]);
      f[tout[ord[i]]] = max(f[tout[ord[i]]], f[i - 1] - x);
    }
    cout << f[n] << '\n';
  }
  return 0;
}
