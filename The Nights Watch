#include<bits/stdc++.h>
using namespace std;
//*******************************************************************************//
#define loop(i,n) for(auto i=0;i<n;++i)
#define ump unordered_map<int,int>
#define mp map<int,int>
#define us unordered_set<int>
#define se set<int>
#define int long long
#define ull unsigned int
#define pii pair<int,int>
#define vi vector<int>
#define all(x) x.begin,x.end()
#define sum(v) accumulate(all(v),0LL)
#define countbits(x) __builtin_popcount(x)
#define pb(x) emplace_back(x)
#define pob pop_back()
#define yes cout<<"YES"<<endl;
#define no cout<<"NO"<<endl;
#define Nikhil ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define inf 1e9
#define mod 1e9+7
//*******************************************************************************//
template<typename T> istream &operator>>(istream &cin,vector<T>&a){for(auto &i:a) cin>>i; return cin;}
template<typename T> ostream &operator<<(ostream &cout,vector<T>&a){for(auto &i:a) cout<<i<<" "; return cout;}
//*******************************************************************************//
ull modpower(ull a,ull b,ull m=mod){a%=m; ull res=1LL; while(b>0){ if(b&1) res=(res*a)%m; a=(a*a)%m; b>>=1; } return res; }
ull pow(ull a,ull b) {ull res=1;while(b>0){if(b&1) res*=a;a=a*a;b>>=1;}return res;}
ull ceil(ull a,ull b){return (a+b-1)/b;}
int32_t main()
{
    Nikhil;
    int testcase=1;
    cin>>testcase;
    while(testcase--){
        int n;
        cin>>n;
        string s;
        cin>>s;
        int c=0,c1=0;
        bool flag=0;
        for(auto i:s)
        {
            if(i=='0') c++;
            else if(flag==0 and i=='1')
            {
                c1+=c/2;
                c=0;
                flag=1;
            }
            else if(i=='1')
            {
                if(c&1) c1+=c/2;
                else c1+=(c/2-1);
                c=0;
            }
        }
        if(!(c&1) and flag==0)
         c1+=c/2;
        else if(c&1 and flag==0)
         c1+=(c/2)+1;
         else
          c1+=c/2;
        cout<<c1<<endl;
    }
}
