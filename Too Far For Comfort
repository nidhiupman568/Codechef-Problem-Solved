/*
*    Author: rishabhxchoudhary
*    Created: Friday, 10.05.2024 10:07 AM (GMT+5:30)
*/
#include <bits/stdc++.h>
using namespace std;

#define int long long int
#define double long double
#define endl '\n'

const int MOD = 998244353;

// Common Mistakes:
// 1. Use sqrtl() instead of sqrt() for long long
// 2. if a[i] goes to 10^9, you only need to check for primes till sqrt(10^9) i.e. 31623
// 3. GCD of |x-y|?
// 4. should pairity of x and y be equal?
// 5. Huffman Coding? Merging 2 smallest elements?
// 6. Coordinate Compression? 
// 7. Min/Max Spanning Tree.
// 8. Topo sort ? if there is something related to relative ordering.
// 9. Try calculating it in reverse order?
// 10. All elements in L,R should be distinct?
// 11. To check if a number is a power of 2, check if n&(n-1)=0

#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(unsigned int t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

const int maxN = 5e5;
int fac[maxN+1], invfac[maxN+1];

int modInverse(int A, int M = MOD) {
    int m0 = M;
    int y = 0, x = 1;
    if (M == 1)
        return 0;
    while (A > 1) {
        int q = A / M;
        int t = M;
        M = A % M, A = t;
        t = y;
        y = x - q * y;
        x = t;
    }
    if (x < 0)
        x += m0;
    return x;
}

int binpow(int a, int b) {
    int res = 1;
    while (b > 0) {
        if (b & 1)
            res = (res * a)%MOD;
        a = (a * a)%MOD;
        b >>= 1;
    }
    return res;
}

int ncr(int n, int r) {
    if (n<r) return 0;
    if (r==0) return 1;
    if (r<0) return 0;
    return ((fac[n]*invfac[n-r])%MOD * invfac[r])%MOD;
}

void solve(){
    int n,m;
    cin>>n>>m;
    vector<int>a(n);
    set<int> s;
    for (int i = 0; i < n; i++) {
        cin>>a[i];
        s.insert(a[i]);
    }
    int have = s.size();
    if (s.find(0)!=s.end()) {
        have--;
    }
    
    vector<int>pref(n+2,0);
    for (int i = 0; i < n; i++) {
        if (a[i]>0) {
            pref[i+1]=1;
        }
        pref[i+1]+=pref[i];
    }
    
    vector<int>nxt_rep(n+2,n+1);
    vector<int>last_seen(m+2,n+1);
    for (int i = n-1; i >= 0; i--) {
        if (a[i]==0) {
            nxt_rep[i+1] = nxt_rep[i+2];
        } else {
            nxt_rep[i+1] = min(nxt_rep[i+2],last_seen[a[i]]);
            last_seen[a[i]]=i+1;
        }
    }
    
    
    int ans = 0;
    
    
    for (int k = 1; k <= n; k++) {
        int choices = ncr(m-have,k-have);
        int arr = 1;
        
        for(int l = 1; l<=n; l += k) {
            int r = min(n,l + k -1);
            if (nxt_rep[l] > r) {
                int nums = pref[r] - pref[l-1];
                int zeros = r-l+1-nums;
                int arranegments = ncr(k-nums,zeros);
                arranegments = (arranegments * fac[zeros])%MOD;
                arr = (arr * arranegments)%MOD;
            } else {
                arr = 0;
                break;
            }
        }
        ans = (ans + (choices * arr)%MOD)%MOD;

    }
    cout<<ans<<endl;
}

signed main()
{
    fac[0] = 1;
    invfac[0] = modInverse(1);
    for (int i = 1; i < maxN+1; i++) {
        fac[i] = (fac[i-1] * i)%MOD;
        invfac[i] = modInverse(fac[i]);
    }
    
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);

    int t=1;
    cin>>t;
    while(t--){
        solve();
    }
    
    #ifndef ONLINE_JUDGE
        function<bool(string,string)> compareFiles = [](string p1, string p2)->bool {
            std::ifstream file1(p1);
            std::ifstream file2(p2);
            if (!file1.is_open() || !file2.is_open()){
                return false;
            }
            cerr<<"checking.... ";
            std::string line1, line2;
            while (std::getline(file1, line1) && std::getline(file2, line2)) {
                if (line1 != line2)
                    return false;
            }
            return file1.eof() || file2.eof();
        };
        bool check = compareFiles("output.txt","expected.txt");
        if (check) cerr<<"OK\n";
        else cerr<<"Failed!\n";
    #endif

    return 0;
}
